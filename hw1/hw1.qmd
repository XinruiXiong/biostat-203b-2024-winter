---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: Xinrui Xiong 806329308
---

Display machine information for reproducibility:

```{r, eval=TRUE}

sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1.  Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2.  Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3.  Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4.  After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5.  After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Required links:**

**Completion Report:** [citiprogram.org/verify/?k4c934eb3-bb6f-4ac6-955e-916055c9f12c-60370630](https://www.citiprogram.org/verify/?k4c934eb3-bb6f-4ac6-955e-916055c9f12c-60370630)

**Completion Certificate:** [citiprogram.org/verify/?w30937e79-3ad1-4acd-a010-d7ba417d5813-60370630](https://www.citiprogram.org/verify/?w30937e79-3ad1-4acd-a010-d7ba417d5813-60370630)

## Q3. Linux Shell Commands

1.  Make the MIMIC v2.2 data available at location `~/mimic`.

```{bash, eval=TRUE}
ls -l ~/mimic
```

Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises.

Use Bash commands to answer following questions.

2.  Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

```{bash, eval=TRUE}
echo "contents in hosp folder:"
ls -l ~/mimic/hosp
echo "contents in hosp folder:"
ls -l ~/mimic/icu
```

The reason using .csv.gz files is because this form requires less storage, it's a better choice for large dataset.

Contents in those folders:

hosp - hospital level data for patients: labs, micro, and electronic medication administration.

icu - ICU level data in events tables.

3.  Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

    zcat: zcat is used to concatenate and display the content of compressed files (usually gzip-compressed files).

    zless: zless allows you to view the contents of compressed files one screen at a time. It's useful for navigating through compressed text files interactively.

    zmore: zmore is used to paginate through the compressed content of files. It displays the content one screen at a time, allowing users to navigate through it.

    zgrep: zgrep allows you to search for a pattern in compressed files, similar to the grep command for uncompressed files. It's used for pattern matching within gzip-compressed files.

4.  (Looping in Bash) What's the output of the following bash script?

```{bash, eval=TRUE}
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```

Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

The bash commands above will list every files in patterns of {a,l,pa}\*.gz using looping.

The following commands shows the line counts.

```{bash, eval=TRUE}
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  gzcat $datafile| wc -l
done
```

5.  Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

```{bash, eval=TRUE}
echo "display of the first 10 lines in admissions.csv.gz"
gzcat ~/mimic/hosp/admissions.csv.gz | head

echo "count the unique patients numbers in admissions.csv.gz (without headline)"
gzcat ~/mimic/hosp/admissions.csv.gz |tail -n +2 | cut -d ',' -f 1 | sort | uniq | wc -l 

echo "count the patients numbers in paitients.csv.gz"
gzcat ~/mimic/hosp/patients.csv.gz |tail -n +2| cut -d ',' -f 1 | sort | uniq | wc -l 
```

According to the result, apparently it doesn't match. The unique patients number in the patients.csv.gz is much higher.

6.  What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `race`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

```{bash, eval=TRUE}
echo "list the unique values"
echo "admission_type:"
gzcat ~/mimic/hosp/admissions.csv.gz |tail -n +2| cut -d ',' -f 6 | sort | uniq
echo "admission_location:"
gzcat ~/mimic/hosp/admissions.csv.gz |tail -n +2| cut -d ',' -f 8 | sort | uniq
echo "insurance:"
gzcat ~/mimic/hosp/admissions.csv.gz |tail -n +2| cut -d ',' -f 10 | sort | uniq
echo "race:"
gzcat ~/mimic/hosp/admissions.csv.gz |tail -n +2| cut -d ',' -f 13 | sort | uniq

echo "count the unique values"
echo "admission_type:"
gzcat ~/mimic/hosp/admissions.csv.gz |tail -n +2| cut -d ',' -f 6 | sort | uniq | wc -l
echo "admission_location:"
gzcat ~/mimic/hosp/admissions.csv.gz |tail -n +2| cut -d ',' -f 8 | sort | uniq | wc -l
echo "insurance:"
gzcat ~/mimic/hosp/admissions.csv.gz |tail -n +2| cut -d ',' -f 10 | sort | uniq | wc -l
echo "race:"
gzcat ~/mimic/hosp/admissions.csv.gz |tail -n +2| cut -d ',' -f 13 | sort | uniq | wc -l

```

7.  *To compress, or not to compress. That's the question.* Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

```{bash, eval=TRUE}
echo "decompress labevents.csv.gz"
# gzip -dk ~/mimic/hosp/labevents.csv.gz
```

```{bash, eval=TRUE}
cd ~/mimic/hosp/
echo "list the size of the two files"
ls -lh labevents.csv.gz
ls -lh labevents.csv
echo "list the time consumption of the two commands"
time gzcat < labevents.csv.gz | wc -l > /dev/null
time wc -l labevents.csv > /dev/null
```

As we can see from the results, the gz files is much smaller(1.8G) than csv file (13G), however, the running time of the commands to read and process the data will be longer for gz files.

## Q4. Who's popular in Price and Prejudice

1.  You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder.

Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

```{bash,eval=TRUE}
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -o -w $char ~/pg42671.txt | wc -l
done
```

2.  What's the difference between the following two commands?

```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```

and

```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

The difference is on the operator '\>' and '\>\>'. '\>' is used for redirection and will overwrite the destination file. '\>\>' is used for appending, adding content to the end of the file without overwriting its existing content. As for the commands above, the first one will create a new file named test1.txt and write the string 'hello, world' into it. If the file already exists, it will be overwritten. The second one will create a new file named test2.txt if it doesn't exist, or append the string 'hello, world' to the end of the file if it already exists.

3.  Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:

```{bash eval=TRUE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```

Using `chmod` to make the file executable by the owner, and run

```{bash eval=FALSE}
# After inserting the code bleow into middle.sh
chmod +x ~/middle.sh
~/middle.sh ~/pg42671.txt 20 5
```

Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

The out put is actually the 16\~20 lines in pg42671.txt. The reason they are printed is that the middle.sh choose the first 20 lines of this file using head, and then take the lst 5 lines of the 20 lines.

"\$1", "\$2", and "\$3" refer to the three arguments the script require. Specifically, "\$1" is the file name (and directory), "\$2" is the upper-bound of the expect lines range, while "\$3" is the lower-bound.

The first line fo this script is a Shebang line, which is used to specify which interpreter the script should be executed by.

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

```{bash eval=TRUE}
echo "cal"
cal
echo "cal 2024"
cal 2024
echo "cal 9 1752"
cal  1752
echo "date"
date
```

The "**cal**" command can displays the calendar for the current month, while "**cal 2024**" can print the calendar of specified year 2024. "**cal 9 1752**" shows an unusual September calendar in 1752. "**date**" can show the current date and time.

```{bash eval=TRUE}
echo "hostname"
hostname
echo "arch"
arch
echo -e "\nuname -a"
uname -a
echo "uptime "
uptime
echo "who am i"
who am i
echo "who"
who
echo "w"
w
echo "id"
id
```

"**hostname**" shows the system's hostname. "**arch**" displays the system architecture. "**uname -a:**" is a command that shows system information, like some system architecture. "**uptime**" displays the system's uptime and average load.

**"who am i"** shows information about the current user. "**who"** displays a list of users currently logged into the system."**w**"will print detailed information about active users on the system, including login time and running commands, while "**id"** shows the current user's UID, GID, and group memberships.

```{bash eval=TRUE}
echo "last | head"
last | head
echo "echo {con,pre}{sent,fer}{s,ed}"
echo {con,pre}{sent,fer}{s,ed}
echo "time sleep 5"
time sleep 5
```

**"last \| head"** can display information about recently logged-in users. "**echo {con,pre}{sent,fer}{s,ed}"** is a Bash shell brace expansion, expanding to multiple strings: **`conss, consed, confess, conferred, press, pressed, press, pressed`**."**time sleep 5"** measures the time it takes to run the **`sleep 5`** command.

```{bash eval=TRUE}
echo "cal"
cal
echo "cal 2024"
cal 2024
echo "cal 9 1752"
cal  1752
echo "date"
date
```

The "**cal**" command can displays the calendar for the current month, while "**cal 2024**" can print the calendar of specified year 2024. "**cal 9 1752**" shows an unusual September calendar in 1752. "**date**" can show the current date and time.

```{bash eval=TRUE}
history | tail
```

**"history \| tail"** shows the last few entries from the Bash shell command history. (works well on my local machine)

## Q6. Book

1.  Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book *Reproducible Research with R and RStudio* to your local machine.

2.  Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.
